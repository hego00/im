// Code generated by xsdgen. DO NOT EDIT.

package edm

import (
	"encoding/xml"
	"time"
)

// A specialized ValueType that may be used as a container for any well-formed XML element value in any namespace.
// Use this to specify an XML element as the value for a Slot.
type AnyValueType struct {
	Item string `xml:",any"`
}

// A specialized ValueType that may be used as a container for a boolean value.
type BooleanValueType struct {
	Value bool `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Value,omitempty"`
}

// A specialized ValueType that may be used as a container for a collection of elements where each element is a ValueType.
type CollectionValueType struct {
	Element        []ValueType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Element,omitempty"`
	CollectionType string      `xml:"collectionType,attr,omitempty"`
}

func (t *CollectionValueType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CollectionValueType
	var overlay struct {
		*T
		CollectionType *string `xml:"collectionType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CollectionType = (*string)(&overlay.T.CollectionType)
	return d.DecodeElement(&overlay, &start)
}

// A specialized ValueType that may be used as a container for a dateTime value.
type DateTimeValueType struct {
	Value time.Time `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Value,omitempty"`
}

func (t *DateTimeValueType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DateTimeValueType
	var layout struct {
		*T
		Value *xsdDateTime `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Value,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Value = (*xsdDateTime)(&layout.T.Value)
	return e.EncodeElement(layout, start)
}
func (t *DateTimeValueType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DateTimeValueType
	var overlay struct {
		*T
		Value *xsdDateTime `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Value,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Value = (*xsdDateTime)(&overlay.T.Value)
	return d.DecodeElement(&overlay, &start)
}

// A specialized ValueType that may be used as a container for a duration value.
type DurationValueType struct {
	Value string `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Value,omitempty"`
}

// Represents a map entry that has a ValueType as key and a ValueType as value. Collection values can be represneted by a CollectionValueType value.
type EntryType struct {
	EntryKey   ValueType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 EntryKey"`
	EntryValue ValueType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 EntryValue,omitempty"`
}

// Common base type for all types need to support extensibility via slots.
type ExtensibleObjectType struct {
	Slot []SlotType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Slot,omitempty"`
}

// A specialized ValueType that may be used as a container for a float value.
type FloatValueType struct {
	Value float32 `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Value,omitempty"`
}

// May be no more than 1024 items long
type FreeFormText string

// A specialized ValueType that may be used as a container for a integer value.
type IntegerValueType struct {
	Value int `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Value,omitempty"`
}

// A type that is used throughout the schema whenever a textual value needs to be represented in multiple local languages.
// It has a sequence of LocalizedString instances, where each String is specific to a particular locale.
type InternationalStringType struct {
	LocalizedString []LocalizedStringType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 LocalizedString,omitempty"`
}

// A specialized ValueType that may be used as a container for a InternationalString value.
type InternationalStringValueType struct {
	Value InternationalStringType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Value,omitempty"`
}

// This type allows the definition of a string value using the specified local language and character set.
// It is used within the InternationalStringType as the type of the LocalizedString sub-element.
type LocalizedStringType struct {
	Lang  string       `xml:"lang,attr,omitempty"`
	Value FreeFormText `xml:"value,attr"`
}

func (t *LocalizedStringType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LocalizedStringType
	var overlay struct {
		*T
		Lang *string `xml:"lang,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Lang = (*string)(&overlay.T.Lang)
	return d.DecodeElement(&overlay, &start)
}

// May be no more than 256 items long
type LongText string

// Represents a map that has a collection of entries (key/value pairs) where each entry is represented by EntryType instances
type MapType struct {
	Entry []EntryType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Entry,omitempty"`
}

// A specialized ValueType that may be used as a container for a Map value.
type MapValueType struct {
	Map MapType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Map,omitempty"`
}

// May be no more than 64 items long
type ShortText string

// Represents an extensible attribute that may be dynamically added to any ExtensibleObjectType instance.
// It is an important extensibility mechanism with ebRIM.
// A SlotType instance contains a name and a value. The value may be of any type.
type SlotType struct {
	Slot      []SlotType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Slot,omitempty"`
	SlotValue ValueType  `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 SlotValue,omitempty"`
	Name      LongText   `xml:"name,attr"`
	Type      LongText   `xml:"type,attr,omitempty"`
}

// A specialized ValueType that may be used as a container for a Slot value.
type SlotValueType struct {
	Slot SlotType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Slot,omitempty"`
}

// May be no more than 16 items long
type String16 string

// May be no more than 32 items long
type String32 string

// May be no more than 4 items long
type String4 string

// May be no more than 8 items long
type String8 string

// A specialized ValueType that may be used as a container for a String value.
// This type is the most commonly used to specify slot values.
type StringValueType struct {
	Value LongText `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Value,omitempty"`
}

// Abstract base type for all types of slot values.
type ValueType struct {
}

// Represents a term within a controlled vocabulary.
type VocabularyTermType struct {
	Vocabulary string `xml:"vocabulary,attr,omitempty"`
	Term       string `xml:"term,attr"`
}

// A specialized ValueType that may be used as a container for a InternationalString value.
type VocabularyTermValueType struct {
	Value VocabularyTermType `xml:"urn:oasis:names:tc:ebxml-regrep:xsd:rim:4.0 Value,omitempty"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
// func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
// 	s := string(bytes.TrimSpace(text))
// 	*t, err = time.Parse(format, s)
// 	if _, ok := err.(*time.ParseError); ok {
// 		*t, err = time.Parse(format+"Z07:00", s)
// 	}
// 	return err
// }
// func _marshalTime(t time.Time, format string) ([]byte, error) {
// 	return []byte(t.Format(format + "Z07:00")), nil
// }
